{
  "compilerOptions": {
    /* Language and Environment */
    "target": "ES2023",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["DOM", "DOM.Iterable", "ESNext"],            /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "react-jsx",                                  /* Specify what JSX code is generated. */
    "emitDecoratorMetadata": false,                      /* Emit design-type metadata for decorated declarations in source files. */

    /* Modules */
    "module": "ESNext",                                /* Specify what module code is generated. */
    "moduleResolution": "node",                        /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": ".",                                    /* Specify the base directory to resolve non-relative module names. */
    "types": ["node"],                                /* Specify type package names to be included without being referenced in a source file. */
    "resolveJsonModule": true,                         /* Enable importing .json files. */

    /* JavaScript Support */
    "allowJs": false,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */

    /* Emit */
    "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "outDir": "dist",
    "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    "noEmit": true,                                   /* Disable emitting files from a compilation. */
    "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */

    /* Interop Constraints */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    "isolatedModules": true,                             /* Ensure that each file can be safely transpiled without relying on other imports. */

    /* Type Checking */
    "strict": true,                                   /* Enable all strict type-checking options. */
    "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": false,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
    "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */

    /* Completeness */
    "skipLibCheck": true,                                 /* Skip type checking all .d.ts files. */
    "paths": {
      "@frontpile/*": ["packages/elements/*/src"],
      "@frontpile/variants/*": ["packages/variants/*/src"]
    }
  },
  "include": ["packages/**/*.ts", "packages/**/*.tsx"],
  "exclude": ["node_modules", "dist", "./docs/**/*"]
}
